# u, r <-> y
def y2u(i):
	return (i/itemN)

def y2v(i):
	return (i%itemN)

def ur2y(i, j):
	return i*itemN+j


phiCC = []
phi = [[[0 for k in range(itemN+1)] for j in range(itemN+1)] for i in range(rN+1)]
for i in range(rN): 
	for j in range(itemN): 
		for k in range(itemN): 
			phi[i][j][k] = DiscreteFactor([yName[ur2y(relation[i][0], j)], yName[ur2y(relation[i][1], k)]], [2, 2], np.random.rand(4))
			G.add_factors(phi[i][j][k])
			phiCC.append(phi)

print(G.get_factors())
G.check_model()

from pgmpy.factors.discrete import DiscreteFactor
from pgmpy.sampling import GibbsSampling
from pgmpy.models import MarkovModel
model = MarkovModel([('A', 'B'), ('C', 'B')])
factor_ab = DiscreteFactor(['A', 'B'], [2, 2], [1, 2, 3, 4])
factor_cb = DiscreteFactor(['C', 'B'], [2, 2], [5, 6, 7, 8])
model.add_factors(factor_ab, factor_cb)
gibbs = GibbsSampling(model)
gen = gibbs.generate_sample(size=2)
[sample for sample in gen]

from pgmpy.inference import VariableElimination
from pgmpy.models import BayesianModel
import numpy as np
import pandas as pd
values = pd.DataFrame(np.random.randint(low=0, high=2, size=(1000, 5)), columns=['A', 'B', 'C', 'D', 'E'])
model = BayesianModel([('A', 'B'), ('C', 'B'), ('C', 'D'), ('B', 'E')])
model.fit(values)
inference = VariableElimination(model)
phi_query = inference.query(['A', 'B'])
print(phi_query['A'])

